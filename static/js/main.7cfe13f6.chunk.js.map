{"version":3,"sources":["utils.ts","components/Pagination/Pagination.tsx","App.tsx","index.tsx"],"names":["pageOptions","Pagination","total","perPage","currentPage","onPageChange","allPages","items","countPerPage","itemsPerPage","forEach","item","index","String","Math","floor","push","getItemsPerPage","from","to","numbers","n","getNumbers","map","pageLinksArr","Object","keys","changeActivePage","changeValue","Number","length","className","cn","disabled","href","onClick","link","App","useState","setPerPage","activePage","setActivePage","lastPageCount","id","value","onChange","event","target","option","htmlFor","ReactDOM","render","document","getElementById"],"mappings":"yLAUO,IAAMA,EAAwB,CAAC,EAAG,EAAG,GAAI,I,uBCsBnCC,EAA8B,SAAC,GAK9B,IAJZC,EAIW,EAJXA,MACAC,EAGW,EAHXA,QACAC,EAEW,EAFXA,YACAC,EACW,EADXA,aAGMC,EAjCgB,SACtBC,GAEwB,IADxBC,EACuB,uDADR,EAETC,EAAmC,GAYzC,OAVAF,EAAMG,SAAQ,SAACC,EAAMC,GACnB,IAAMR,EAAcS,OAAOC,KAAKC,MAAMH,EAAQJ,GAAgB,GAE1DC,EAAaL,GACfK,EAAaL,GAAaY,KAAKL,GAE/BF,EAAaL,GAAe,CAACO,MAI1BF,EAiBUQ,CDvCZ,SAAoBC,EAAcC,GAGvC,IAFA,IAAMC,EAAU,GAEPC,EAAIH,EAAMG,GAAKF,EAAIE,GAAK,EAC/BD,EAAQJ,KAAKK,GAGf,OAAOD,EC+BeE,CAAW,EAAGpB,GAAOqB,KAAI,SAACF,GAAD,qBAAeA,MACtBlB,GAClCqB,EAAeC,OAAOC,KAAKpB,GAE3BqB,EAAmB,SAACC,GACJ,UAAhBA,GACExB,EAAcyB,OAAOL,EAAaA,EAAaM,OAAS,KAC1DzB,EAAaD,EAAc,GAIX,SAAhBwB,GACExB,EAAc,GAChBC,EAAaD,EAAc,IAKjC,OACE,qCACE,qBAAI2B,UAAU,aAAd,UACE,oBACEA,UAAS,oBAELC,IAAG,CACDC,SAA0B,IAAhB7B,KAJlB,SAQE,mBACE,UAAQ,WACR2B,UAAU,YACVG,KAAK,QACL,gBAA+B,IAAhB9B,EACf+B,QAAS,kBAAMR,EAAiB,SALlC,oBAWDH,EAAaD,KAAI,SAACa,GAAD,OAChB,oBAEEL,UAAWC,IAAG,CACZ,oBAAqBI,KAAUhC,EAC/B,aAAcgC,IAAShC,IAJ3B,SAOE,mBACE,UAAQ,WACR8B,KAAK,KACLH,UAAU,YACVI,QAAS,kBAAM9B,EAAawB,OAAOO,KAJrC,SAMGA,KAZEA,MAiBT,oBACEL,UAAS,oBAELC,IAAG,CACDC,SACA7B,IAAgByB,OAAOL,EAAaA,EAAaM,OAAS,OALlE,SASE,mBACE,UAAQ,WACRC,UAAU,YACVG,KAAK,QACL,gBACE9B,IAAgByB,OAAOL,EAAaA,EAAaM,OAAS,IAE5DK,QAAS,kBAAMR,EAAiB,UAPlC,uBAaJ,6BACGrB,EAASF,GAAamB,KAAI,SAACZ,GAAD,OACzB,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,YCjHrB0B,EAAgB,WAC3B,MAA8BC,mBAAS,GAAvC,mBAAOnC,EAAP,KAAgBoC,EAAhB,KACA,EAAoCD,mBAAS,GAA7C,mBAAOE,EAAP,KAAmBC,EAAnB,KASMC,EAbM,IAasBF,EAAa,GAAKrC,EAAYA,EAbpD,IAcGqC,EAAa,GAAKrC,EAC7BA,EAEJ,OACE,sBAAK4B,UAAU,YAAf,UACE,uDACA,mBAAGA,UAAU,OAAO,UAAQ,OAA5B,wBACWS,EADX,oBACiCA,EAAa,GAAKrC,EAAU,EAD7D,eACsEqC,EAAa,GAAKrC,EAAWuC,EADnG,eApBQ,GAoBR,OAIA,sBAAKX,UAAU,iBAAf,UACE,qBAAKA,UAAU,0BAAf,SACE,wBACE,UAAQ,kBACRY,GAAG,kBACHZ,UAAU,eACVa,MAAOzC,EACP0C,SAzBoB,SAC5BC,GAEAP,EAAWV,OAAOiB,EAAMC,OAAOH,QAC/BH,EAAc,IAgBR,SAOGzC,EAAYuB,KAAI,SAACyB,GAAD,OACf,wBAAQJ,MAAOI,EAAf,SACGA,GADH,UAA+BA,WAOrC,uBAAOC,QAAQ,kBAAkBlB,UAAU,qBAA3C,+BAIF,cAAC,EAAD,CACE7B,MA9CM,GA+CNC,QAASA,EACTC,YAAaoC,EACbnC,aAAcoC,QCpDtBS,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.7cfe13f6.chunk.js","sourcesContent":["export function getNumbers(from: number, to: number): number[] {\n  const numbers = [];\n\n  for (let n = from; n <= to; n += 1) {\n    numbers.push(n);\n  }\n\n  return numbers;\n}\n\nexport const pageOptions: number[] = [3, 5, 10, 20];\n","import cn from 'classnames';\nimport { getNumbers } from '../../utils';\nimport { ItemsPerPage } from '../../types/ItemsPerPage';\n\ntype Item = string;\n\nconst getItemsPerPage = (\n  items: Item[],\n  countPerPage = 5,\n): ItemsPerPage<Item> => {\n  const itemsPerPage: ItemsPerPage<Item> = {};\n\n  items.forEach((item, index) => {\n    const currentPage = String(Math.floor(index / countPerPage) + 1);\n\n    if (itemsPerPage[currentPage]) {\n      itemsPerPage[currentPage].push(item);\n    } else {\n      itemsPerPage[currentPage] = [item];\n    }\n  });\n\n  return itemsPerPage;\n};\n\ninterface Props {\n  total: number;\n  perPage: number;\n  currentPage: number;\n  onPageChange: (page: number) => void;\n}\n\nexport const Pagination: React.FC<Props> = ({\n  total,\n  perPage,\n  currentPage,\n  onPageChange,\n}: Props) => {\n  const items: Item[] = getNumbers(1, total).map((n) => `Item ${n}`);\n  const allPages = getItemsPerPage(items, perPage);\n  const pageLinksArr = Object.keys(allPages);\n\n  const changeActivePage = (changeValue: string) => {\n    if (changeValue === 'front') {\n      if (currentPage < Number(pageLinksArr[pageLinksArr.length - 1])) {\n        onPageChange(currentPage + 1);\n      }\n    }\n\n    if (changeValue === 'back') {\n      if (currentPage > 1) {\n        onPageChange(currentPage - 1);\n      }\n    }\n  };\n\n  return (\n    <>\n      <ul className=\"pagination\">\n        <li\n          className={\n            `page-item ${\n              cn({\n                disabled: currentPage === 1,\n              })}`\n          }\n        >\n          <a\n            data-cy=\"prevLink\"\n            className=\"page-link\"\n            href=\"#prev\"\n            aria-disabled={currentPage === 1}\n            onClick={() => changeActivePage('back')}\n          >\n            «\n          </a>\n        </li>\n\n        {pageLinksArr.map((link) => (\n          <li\n            key={link}\n            className={cn({\n              'page-item active': +link === +currentPage,\n              'page-item': +link !== currentPage,\n            })}\n          >\n            <a\n              data-cy=\"pageLink\"\n              href=\"#1\"\n              className=\"page-link\"\n              onClick={() => onPageChange(Number(link))}\n            >\n              {link}\n            </a>\n          </li>\n        ))}\n\n        <li\n          className={\n            `page-item ${\n              cn({\n                disabled:\n                currentPage === Number(pageLinksArr[pageLinksArr.length - 1]),\n              })}`\n          }\n        >\n          <a\n            data-cy=\"nextLink\"\n            className=\"page-link\"\n            href=\"#next\"\n            aria-disabled={\n              currentPage === Number(pageLinksArr[pageLinksArr.length - 1])\n            }\n            onClick={() => changeActivePage('front')}\n          >\n            »\n          </a>\n        </li>\n      </ul>\n      <ul>\n        {allPages[currentPage].map((item) => (\n          <li data-cy=\"item\" key={item}>\n            {item}\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.css';\n\nimport { pageOptions } from './utils';\nimport { Pagination } from './components/Pagination';\n\nconst total = 42;\n\nexport const App: React.FC = () => {\n  const [perPage, setPerPage] = useState(5);\n  const [activePage, setActivePage] = useState(1);\n\n  const handlePageCountSelect = (\n    event: React.ChangeEvent<HTMLSelectElement>,\n  ) => {\n    setPerPage(Number(event.target.value));\n    setActivePage(1);\n  };\n\n  const lastPageCount = ((total - ((activePage - 1) * perPage)) < perPage)\n    ? (total - ((activePage - 1) * perPage))\n    : perPage;\n\n  return (\n    <div className=\"container\">\n      <h1>Items with Pagination</h1>\n      <p className=\"lead\" data-cy=\"info\">\n        {`Page ${activePage} (items ${(activePage - 1) * perPage + 1} - ${((activePage - 1) * perPage) + lastPageCount} of ${total})`}\n      </p>\n\n      <div className=\"form-group row\">\n        <div className=\"col-3 col-sm-2 col-xl-1\">\n          <select\n            data-cy=\"perPageSelector\"\n            id=\"perPageSelector\"\n            className=\"form-control\"\n            value={perPage}\n            onChange={handlePageCountSelect}\n          >\n            {pageOptions.map((option) => (\n              <option value={option} key={`${option}`}>\n                {option}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        <label htmlFor=\"perPageSelector\" className=\"col-form-label col\">\n          items per page\n        </label>\n      </div>\n      <Pagination\n        total={total} // total number of items to paginate\n        perPage={perPage} // number of items per page\n        currentPage={activePage} /* optional with 1 by default */\n        onPageChange={setActivePage}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}